cscope 15 $HOME/develop/vimrc -q 0000000320 0000031136
	@amix-vimrc/sources_non_forked/vimerl/autoload/erlang_complete.erl

1 #!/
u§
/
bö
/
ív
 
es¸ùt


3 -
ö˛ude_lib
("xmerl/include/xmerl.hrl").

5 
maö
([
ModName
]) ->

6 
	gfûe
:
c⁄su…
("ªb¨.c⁄fig"Ë
of


7 {
ok
, 
	gTîms
} ->

8 
	gReb¨LibDús
 = 
¥›li°s
:
gë_vÆue
(
lib_dús
, 
Tîms
, []),

9 
	gli°s
:
f‹óch
(

10 
fun
(
LibDú
) ->

11 
code
:
add_∑thß
(
fûñib
:
wûdˇrd
(
LibDú
 ++ "/*/ebin"))

12 
íd
, 
Reb¨LibDús
),

13 
	gReb¨DïsDú
 = 
¥›li°s
:
gë_vÆue
(
dïs_dú
, 
Tîms
, "deps"),

14 
	gcode
:
add_∑thß
(
fûñib
:
wûdˇrd
(
Reb¨DïsDú
 ++ "/*/ebin"));

15 {
	gîr‹
, 
	g_
} ->

16 
åue


17 
	gíd
,

18 
	gcode
:
add_∑tha
("ebin"),

19 
	gMod
 = 
li°_to_©om
(
ModName
),

20 
	gEdoc
 = 
åy


21 
	$moduÀ_edoc
(
Mod
)

22 
ˇtch


23 
throw
:
nŸ_found
 ->

25 
îr‹
:{
badm©ch
, 
_
} ->

27 
	gexô
:
îr‹
 ->

29 
íd
,

30 
	gInfo
 = 
åy


31 
	$moduÀ_öfo2
(
Mod
)

32 
ˇtch


33 
îr‹
:
undef
 ->

35 
íd
,

36 
FunS≥cs
 = 
	`mîge_fun˘i⁄s
(
Edoc
, 
Info
),

37 
li°s
:
	`f‹óch
(
	`fun
(
Fun
Ë-> 
	$¥öt_fun˘i⁄
(
Fun
Ë
íd
, 
FunS≥cs
);

38 
	`maö
(
_
) ->

39 
io
:
	`f‹m©
("Ußge: ~†<moduÀ>~n", [
es¸ùt
:
	`s¸ùt_«me
()]),

40 
	`hÆt
(1).

42 
	`moduÀ_edoc
(
Mod
) ->

43 
Fûe
 = 
fûíame
:
	$föd_§c
(
Mod
Ë
of


44 {
îr‹
, 
_
} ->

45 
BómFûe
 = 
©om_to_li°
(
Mod
) ++ ".beam",

46 
	gcode
:
	$whîe_is_fûe
(
BómFûe
Ë
of


47 
n⁄_exi°ög
 ->

48 
	`throw
(
nŸ_found
);

49 
BómP©h
 ->

50 
SrcP©h
 = 
	`bóm_to_§c_∑th
(
BómP©h
),

51 
fûñib
:
	$is_ªguœr
(
SrcP©h
Ë
of


52 
åue
 ->

53 
SrcP©h
;

54 
Ál£
 ->

55 
	$throw
(
nŸ_found
)

56 
íd


57 
íd
;

58 {
Fûe0
, 
_
} ->

59 
	gFûe0
 ++ ".erl"

60 
	gíd
,

61 {
	g_
, 
	gDoc
} = 
edoc
:
gë_doc
(
Fûe
),

62 
	gFuns
 = 
xmîl_x∑th
:
°rög
("/moduÀ/fun˘i⁄s/fun˘i⁄", 
Doc
),

63 
	gFunS≥cs
 = 
m≠_fun˘i⁄s
(
fun
(
Fun
Ë-> 
	$™Æyze_fun˘i⁄
(
Fun
Ë
íd
, 
Funs
),

64 
li°s
:
	`keys‹t
(1, 
FunS≥cs
).

66 
	`bóm_to_§c_∑th
(
BómP©h
) ->

67 
P©hP¨ts
 = 
fûíame
:
	`•lô
(
BómP©h
),

68 {
Dús
, [
BómFûe
]
	}
} = 
li°s
:
•lô
(
Àngth
(
P©hP¨ts
) - 1, PathParts),

69 {
	gDús2
, [
DúsLa°
]} = 
li°s
:
•lô
(
Àngth
(
Dús
) - 1, Dirs),

70 
	gfûíame
:
	$∑thty≥
(
BómP©h
Ë
of


71 
absﬁuã
 ->

72 
Dús3
 = 
DúsLa°
 
of


74 
Dús2
 ++ ["src"];

75 
_
 ->

76 
Dús


77 
íd
;

78 
ªœtive
 ->

79 
Dús3
 = 
Dús


80 
íd
,

81 
fûíame
:
	`joö
(
Dús3
 ++ [
	`bóm_to_§c_fûe
(
BómFûe
)]).

83 
	`bóm_to_§c_fûe
(
BómFûe
) ->

84 [
ModName
, "bóm"] = 
°rög
:
	`tokís
(
BómFûe
, "."),

85 
ModName
 ++ ".erl".

87 
	`m≠_fun˘i⁄s
(
_
, []) ->

89 
	`m≠_fun˘i⁄s
(
F
, [
H
 | 
T
]) ->

90 
åy


91 [
	`F
(
H
Ë| 
	`m≠_fun˘i⁄s
(
F
, 
T
)]

92 
ˇtch


93 
throw
:
no_•ec
 ->

94 
	$m≠_fun˘i⁄s
(
F
, 
T
)

95 
íd
.

97 
	`™Æyze_fun˘i⁄
(
Fun
) ->

98 
Name
 = 
	`li°_to_©om
(
	`gë_©åibuã
(
Fun
, "name")),

99 
Args0
 = 
xmîl_x∑th
:
	`°rög
("ty≥•ec/ty≥/fun/¨gty≥s/ty≥", 
Fun
),

100 
Args
 = 
li°s
:
	`m≠
(
	`fun
(
Arg
Ë-> 
	`gë_©åibuã
(Arg, "«me"Ë
íd
, 
Args0
),

101 
Rëu∫
 = 
	`™Æyze_ªtu∫
(
Fun
),

102 {
Name
, 
Args
, 
Rëu∫
}.

104 
™Æyze_ªtu∫
(
Fun
) ->

105 
	gxmîl_x∑th
:
°rög
("ty≥•ec/ty≥/fun/ty≥/*", 
Fun
Ë
	gof


106 [
Rëu∫
] ->

107 
sim∂ify_ªtu∫
(
xmîl_lib
:
sim∂ify_ñemít
(
Rëu∫
));

109 
	$throw
(
no_•ec
)

110 
íd
.

112 
	`sim∂ify_ªtu∫
({
ty≥v¨
, [{
«me
, 
Name
}], 
_
}Ë->

113 
	gName
;

114 
sim∂ify_ªtu∫
({
ty≥
, 
_
, [
Ty≥
]}) ->

115 
sim∂ify_ªtu∫
(
Ty≥
);

116 
sim∂ify_ªtu∫
({
ab°y≥
, 
_
, [
Ty≥
]}) ->

117 {
	gîœngName
, 
	gAârs
, 
	g_
} = 
Ty≥
,

118 
	gName
 = 
¥›li°s
:
gë_vÆue
(
«me
, 
Aârs
),

119 
	gName
 ++ "()";

120 
sim∂ify_ªtu∫
({
ªc‹d
, 
_
, [
Ty≥
]}) ->

121 
sim∂ify_ªtu∫
(
Ty≥
) ++ "()";

122 
sim∂ify_ªtu∫
({
n⁄em±y_li°
, 
_
, [
Ty≥
]}) ->

123 "[" ++ 
sim∂ify_ªtu∫
(
Ty≥
) ++ "]";

124 
sim∂ify_ªtu∫
({
tu∂e
, 
_
, 
Ty≥s
}) ->

125 
	gEÀms
 = 
li°s
:
m≠
(
fun
(
Ty≥
Ë-> 
	$sim∂ify_ªtu∫
(
Ty≥
Ë
íd
, 
Ty≥s
),

126 "{" ++ 
°rög
:
	`joö
(
EÀms
, ", ") ++ "}";

127 
	`sim∂ify_ªtu∫
({
li°
, 
_
, 
Ty≥s
}Ë->

128 
	gEÀms
 = 
li°s
:
m≠
(
fun
(
Ty≥
Ë-> 
	$sim∂ify_ªtu∫
(
Ty≥
Ë
íd
, 
Ty≥s
),

129 "[" ++ 
°rög
:
	`joö
(
EÀms
, ", ") ++ "]";

130 
	`sim∂ify_ªtu∫
({
∑ªn
, 
_
, 
Ty≥s
}Ë->

131 
	gEÀms
 = 
li°s
:
m≠
(
fun
(
Ty≥
Ë-> 
	$sim∂ify_ªtu∫
(
Ty≥
Ë
íd
, 
Ty≥s
),

132 "(" ++ 
°rög
:
	`joö
(
EÀms
, ", ") ++ ")";

133 
	`sim∂ify_ªtu∫
({, 
_
, 
Ty≥s
}Ë->

134 
	gEÀms
 = 
li°s
:
m≠
(
fun
(
Ty≥
Ë-> 
	$sim∂ify_ªtu∫
(
Ty≥
Ë
íd
, 
Ty≥s
),

135 
°rög
:
	`joö
(
EÀms
, " | ");

136 
	`sim∂ify_ªtu∫
({
öãgî
, [{
vÆue
, 
VÆ
}], 
_
}Ë->

137 
	gVÆ
;

138 
sim∂ify_ªtu∫
({
©om
, [{
vÆue
, 
VÆ
}], 
_
}) ->

139 
	gVÆ
;

140 
sim∂ify_ªtu∫
({
nû
, 
_
, _}) ->

143 
gë_©åibuã
(
EÀm
, 
AârName
) ->

144 [
Aâr
] = 
xmîl_x∑th
:
°rög
("@" ++ 
AârName
, 
EÀm
),

145 
	gAâr
#xmlAâribuã.
	gvÆue
.

147 
moduÀ_öfo2
(
Mod
) ->

148 
	gli°s
:
keys‹t
(1, 
Mod
:
moduÀ_öfo
(
exp‹ts
)).

150 
mîge_fun˘i⁄s
(
Edoc
, 
Info
) ->

151 
mîge_fun˘i⁄s
(
Edoc
, 
Info
, []).

153 
mîge_fun˘i⁄s
([], [], 
Funs
) ->

154 
	gli°s
:
ªvî£
(
Funs
);

155 
mîge_fun˘i⁄s
([], 
Info
, 
Funs
) ->

156 
	gli°s
:
ªvî£
(
Funs
, 
Info
);

157 
mîge_fun˘i⁄s
(
Edoc
, [], 
Funs
) ->

158 
	gli°s
:
ªvî£
(
Funs
, 
Edoc
);

159 
mîge_fun˘i⁄s
(
Edoc
, 
Info
, 
Funs
) ->

160 [
H1
 = {
K1
, 
_
, _} | 
T1
] = 
Edoc
,

161 [
H2
 = {
K2
, 
_
} | 
T2
] = 
Info
,

163 
	gK1
 =
K2
 ->

164 
mîge_fun˘i⁄s
(
T1
, 
T2
, [
H1
 | 
Funs
]);

165 
	gK1
 < 
	gK2
 ->

166 
mîge_fun˘i⁄s
(
T1
, 
Info
, [
H1
 | 
Funs
]);

167 
	gK1
 > 
	gK2
 ->

168 
mîge_fun˘i⁄s
(
Edoc
, 
T2
, [
H2
 | 
Funs
])

169 
	gíd
.

171 
¥öt_fun˘i⁄
({
Name
, 
Arôy
}) ->

172 
	gio
:
f‹m©
("~s/~B~n", [
Name
, 
Arôy
]);

173 
¥öt_fun˘i⁄
({
Name
, 
Args
, 
Rëu∫
}) ->

174 
	gio
:
f‹m©
("~s(~sË-> ~s~n", [
Name
, 
°rög
:
joö
(
Args
, ", "), 
Rëu∫
]).

	@amix-vimrc/sources_non_forked/vimerl/compiler/erlang_check.erl

1 #!/
u§
/
bö
/
ív
 
es¸ùt


3 
maö
([
Fûe
]) ->

4 
	gDú
 = 
gë_roŸ
(
fûíame
:
dú«me
(
Fûe
)),

5 
	gDefs
 = [
°r⁄g_vÆid©i⁄
,

6 
w¨n_exp‹t_Æl
,

7 
w¨n_exp‹t_v¨s
,

8 
w¨n_shadow_v¨s
,

9 
w¨n_obsﬁëe_gu¨d
,

10 
w¨n_unu£d_imp‹t
,

11 
ªp‹t
,

12 {
i
, 
Dú
 ++ "/include"}],

13 
	gReb¨Fûe
 = 
ªb¨_fûe
(
Dú
),

14 
	gReb¨O±s
 = 
ªb¨_›ts
(
Reb¨Fûe
),

15 
	gcode
:
add_∑tha
(
fûíame
:
ab¢ame
("ebin")),

16 
	gcompûe
:
fûe
(
Fûe
, 
Defs
 ++ 
Reb¨O±s
);

17 
maö
(
_
) ->

18 
	gio
:
f‹m©
("Ußge: ~†<fûe>~n", [
es¸ùt
:
s¸ùt_«me
()]),

19 
hÆt
(1).

21 
ªb¨_fûe
(
Dú
) ->

22 
	gDúLi°
 = 
fûíame
:
•lô
(
Dú
),

23 
	gli°s
:
	$œ°
(
DúLi°
Ë
of


26 
_
 ->

28 
íd
.

30 
	`ªb¨_›ts
(
Reb¨Fûe
) ->

31 
Dú
 = 
	`gë_roŸ
(
fûíame
:
	`dú«me
(
Reb¨Fûe
)),

32 
fûe
:
	$c⁄su…
(
Reb¨Fûe
Ë
of


33 {
ok
, 
Tîms
} ->

34 
	gReb¨LibDús
 = 
¥›li°s
:
gë_vÆue
(
lib_dús
, 
Tîms
, []),

35 
	gli°s
:
f‹óch
(

36 
fun
(
LibDú
) ->

37 
code
:
add_∑thß
(
fûñib
:
wûdˇrd
(
LibDú
 ++ "/*/ebin"))

38 
íd
, 
Reb¨LibDús
),

39 
	gReb¨DïsDú
 = 
¥›li°s
:
gë_vÆue
(
dïs_dú
, 
Tîms
, "deps"),

40 
	gcode
:
add_∑thß
(
fûñib
:
wûdˇrd
(
Reb¨DïsDú
 ++ "/*/ebin")),

41 
	gIn˛udeDïs
 = {
i
, 
fûíame
:
joö
(
Dú
, 
Reb¨DïsDú
)},

42 
	g¥›li°s
:
gë_vÆue
(
îl_›ts
, 
Tîms
, []Ë++ [
In˛udeDïs
];

43 {
	gîr‹
, 
	g_
} 
whí
 
	gReb¨Fûe
 == "rebar.config" ->

45 {
	gîr‹
, 
	g_
} ->

46 
ªb¨_›ts
("rebar.config")

47 
	gíd
.

49 
gë_roŸ
(
Dú
) ->

50 
	gP©h
 = 
fûíame
:
•lô
(fûíame:
ab¢ame
(
Dú
)),

51 
	gfûíame
:
joö
(
gë_roŸ
(
li°s
:
ªvî£
(
P©h
), Path)).

53 
gë_roŸ
([], 
P©h
) ->

54 
	gP©h
;

55 
gë_roŸ
(["§c" | 
Taû
], 
_P©h
) ->

56 
	gli°s
:
ªvî£
(
Taû
);

57 
gë_roŸ
(["ã°" | 
Taû
], 
_P©h
) ->

58 
	gli°s
:
ªvî£
(
Taû
);

59 
gë_roŸ
([
_
 | 
Taû
], 
P©h
) ->

60 
gë_roŸ
(
Taû
, 
P©h
).

	@amix-vimrc/sources_non_forked/vimerl/indent/erlang_indent.erl

1 #!/
u§
/
bö
/
ív
 
es¸ùt


2 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()! -
	gdëached


4 -
	`mode
(
	gcompûe
).

6 %-
	`deföe
(
	gDEBUG
, 
	gåue
).

8 -
	`ifdef
(
	gDEBUG
).

9 -
	`deföe
(
	`PRINT_ERROR
(
	gT
, 
	gS
, 
	gL
), 
	gio
:
	`f‹m©
("Eº‹:Üöê~BÅokí ~∞°©ê~p~n", [
L
, 
T
, 
S
])).

10 -
	`deföe
(
	`PRINT_STATE
(
	gS
), 
	gio
:
	`f‹m©
("Debug: sèã ~p~n", [
S
])).

12 -
	`deföe
(
	`PRINT_ERROR
(
	gT
, 
	gS
, 
	gL
), 
	gåue
).

13 -
	`deföe
(
	`PRINT_STATE
(
	gS
), 
	gåue
).

14 -
	gídif
.

16 -
	`deföe
(
	`IS
(
	gT
, 
	gC
), (
	`ñemít
(1, TË=
C
)).

17 -
	`deföe
(
	`OPEN_BRACKET
(
T
), ?
	`IS
(
	gT
, '('); ?IS(T, '{'); ?IS(T, '['); ?IS(T, '<<')).

18 -
	`deföe
(
	`CLOSE_BRACKET
(
	gT
), ?
	`IS
(T, ')'); ?IS(T, '}'); ?IS(T, ']'); ?IS(T, '>>')).

19 -
	`deföe
(
	`BRANCH_EXPR
(
	gT
), ?
	`IS
(T, 'fun'); ?IS(T, 'receive'); ?IS(T, 'if'); ?IS(T, 'case'); ?IS(T, 'try')).

21 -
	`ªc‹d
(
	g°©e
, {
	g°ack
 = [], 
	gèbs
 = [0], 
	gcﬁs
 = [
n⁄e
]}).

23 
	`maö
(["-f", 
Fûe
, 
Löe
]) ->

24 
	gSour˚
 = 
	`ªad_fûe
(
Fûe
),

25 
	gIndít
 = 
	`f‹m©_ödíèti⁄
(
	`sour˚_ödíèti⁄
(
Sour˚
, 
	`li°_to_öãgî
(
	gLöe
))),

26 
	gio
:
	`f‹m©
("~s~n", [
Indít
]);

27 
	`maö
([
InFifo
, 
OutFifo
]) ->

28 
	`ªad_fifo
(
	gInFifo
Ë
	gof


30 
	`hÆt
(0);

31 
	gI≈ut
 ->

32 {
	gok
, [
Löe
], [
$
\
n
 | 
Sour˚
]} = 
io_lib
:
	`‰ód
("~d", 
	gI≈ut
),

33 
	gIndít
 = 
	`f‹m©_ödíèti⁄
(
	`sour˚_ödíèti⁄
(
Sour˚
, 
	gLöe
)),

34 
	`wrôe_fifo
(
	gOutFifo
, 
	gli°s
:
	`Ê©ãn
(
Indít
)),

35 
	`maö
([
InFifo
, 
OutFifo
])

36 
	gíd
;

37 
	`maö
(
	g_
) ->

38 
	gio
:
	`f‹m©
("Ußge: ~†<ö_fifo> <out_fifo> | -‡<fûe> <löe>~n", [
es¸ùt
:
	`s¸ùt_«me
()]),

39 
	`hÆt
(1).

41 
	`ªad_fifo
(
	gFifo
) ->

42 
	gos
:
	`cmd
("ˇà" ++ 
Fifo
).

44 
	`wrôe_fifo
(
Fifo
, 
	gSå
) ->

45 
	gos
:
	`cmd
("echÿ" ++ 
Så
 ++ " > " ++ 
Fifo
).

47 
	`ªad_fûe
(
Fûe
) ->

48 {
ok
, 
	gBö
} = 
fûe
:
	`ªad_fûe
(
Fûe
),

49 
	`bö¨y_to_li°
(
	gBö
).

51 
	`f‹m©_ödíèti⁄
({
	gTab
, 
	gn⁄e
}) ->

52 
	gio_lib
:
	`f‹m©
("~B", [
Tab
]);

53 
	`f‹m©_ödíèti⁄
({
	gTab
, 
	gCﬁ
}) ->

54 
	gio_lib
:
	`f‹m©
("~B ~B", [
Tab
, 
Cﬁ
]).

56 
	`sour˚_ödíèti⁄
(
	gSour˚
, 
	gLöe
) ->

57 
åy


58 
	gTokís
 = 
	`tokíize_sour˚
(
Sour˚
),

59 {
	gPªvToks
, 
	gNextToks
} = 
	`•lô_¥ev_block
(
Tokís
, 
	gLöe
),

60 
	`ödíèti⁄_bëwìn
(
	gPªvToks
, 
	gNextToks
)

61 
ˇtch


62 
	gthrow
:
sˇn_îr‹
 ->

63 {-1, 
	gn⁄e
}

64 
	gíd
.

66 
	`tokíize_sour˚
(
	gSour˚
) ->

67 
	`ót_sheb™g
(
	`tokíize_sour˚2
(
	gSour˚
)).

69 
	`tokíize_sour˚2
(
	gSour˚
) ->

70 
	gîl_sˇn
:
	`°rög
(
Sour˚
, {1, 1}Ë
	gof


71 {
	gok
, 
	gTokís
, 
	g_
} ->

72 
	gTokís
;

73 {
	gîr‹
, 
	g_
, _} ->

74 
	`throw
(
	gsˇn_îr‹
)

75 
	gíd
.

77 
	`ót_sheb™g
([{'#', {
N
, 
_
}}, {'!', {N, _}} | 
Tokís
]) ->

78 
	gli°s
:
	`dr›whûe
(
	`fun
(
T
Ë-> 
	`löe
(TË=
N
 
íd
, 
	gTokís
);

79 
	`ót_sheb™g
(
	gTokís
) ->

80 
	gTokís
.

82 
	`•lô_¥ev_block
(
	gTokís
, 
	gLöe
Ë
whí
 Line < 1 ->

83 
	`îr‹
(
	gbad¨g
, [
Tokís
, 
Löe
]);

84 
	`•lô_¥ev_block
(
	gTokís
, 
	gLöe
) ->

85 {
	gPªvToks
, 
	gNextToks
} = 
li°s
:
	`•lôwôh
(
	`fun
(
T
Ë-> 
	`löe
(TË< 
Löe
 
íd
, 
	gTokís
),

86 
	gPªvToks2
 = 
li°s
:
	`ªvî£
(
PªvToks
),

87 
	gPªvToks3
 = 
li°s
:
	`èkewhûe
(
	`fun
(
T
Ë-> 
	`ˇãg‹y
(TË/
dŸ
 
íd
, 
	gPªvToks2
),

88 {
	gli°s
:
	`ªvî£
(
PªvToks3
), 
	gNextToks
}.

90 
	`ˇãg‹y
(
	gTokí
) ->

91 {
	gˇãg‹y
, 
	gC©
} = 
îl_sˇn
:
	`tokí_öfo
(
Tokí
, category),

92 
	gC©
.

94 
	`löe
(
	gTokí
) ->

95 {
	glöe
, 
	gLöe
} = 
îl_sˇn
:
	`tokí_öfo
(
Tokí
,Üine),

96 
	gLöe
.

98 
	`cﬁumn
(
	gTokí
) ->

99 {
	gcﬁumn
, 
	gCﬁ
} = 
îl_sˇn
:
	`tokí_öfo
(
Tokí
, column),

100 
	gCﬁ
.

102 
	`ödíèti⁄_bëwìn
([], 
	g_
) ->

103 {0, 
	gn⁄e
};

104 
	`ödíèti⁄_bëwìn
(
	gPªvToks
, 
	gNextToks
) ->

105 
åy


106 
	gSèã
 = 
	`∑r£_tokís
(
PªvToks
),

107 ?
	`PRINT_STATE
(
	gSèã
),

108 
	gSèã2
 = 
Sèã
#
°©e
.
°ack
 
of


109 [{'=', 
_
} | _] ->

110 
	`p›
(
Sèã
);

111 
	g_
 ->

112 
Sèã


113 
	gíd
,

114 #
°©e
{
èbs
 = [
Tab
 | 
_
], 
cﬁs
 = [
Cﬁ
 | _]} = 
Sèã
,

115 
	gTab2
 = 
	`hd
(
Sèã2
#
°©e
.
èbs
),

116 {
	gSèã2
#
	g°©e
.
	g°ack
, 
	gNextToks
} 
	gof


117 {
	g_
, [
T
 | 
_
]} 
	gwhí
 ?
	`CLOSE_BRACKET
(
	gT
) ->

118 
Cﬁ
 
of


119 
	gn⁄e
 ->

120 {
	gTab
, 
	gCﬁ
};

121 
_
 
	gwhí
 ?
	`IS
(
	gT
, '>>') ->

122 {
	gTab
, 
	gCﬁ
 - 2};

123 
	g_
 ->

124 {
	gTab
, 
	gCﬁ
 - 1}

125 
	gíd
;

126 {[{'åy', 
_
} | _], [
T
 | _]} 
	gwhí
 ?
	`IS
(
	gT
, 'catch'); ?IS(T, 'after') ->

127 {
	gTab2
 - 1, 
	gn⁄e
};

128 {[{'ª˚ive', 
_
} | _], [
T
 | _]} 
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

129 {
	gTab2
 - 1, 
	gn⁄e
};

130 {[{'->', 
_
}, {'åy', _} | _], [
T
 | _]} 
	gwhí
 ?
	`IS
(
	gT
, 'catch') ->

131 {
	gTab2
 - 2, 
	gn⁄e
};

132 {[{'->', 
_
} | _], [
T
 | _]} 
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

133 {
	gTab2
 - 2, 
	gn⁄e
};

134 {[
T1
 | 
_
], [
T2
 | _]} 
	gwhí
 ?
	`IS
(
	gT1
, 'begö'), ?IS(
	gT2
, 'end') ->

135 {
	gTab2
 - 1, 
	gn⁄e
};

136 {[
T1
 | 
_
], [
T2
 | _]} 
	gwhí
 ?
	`IS
(
	gT1
, 'åy'), ?IS(
	gT2
, 'end') ->

137 {
	gTab2
 - 1, 
	gn⁄e
};

138 {[
T1
 | 
_
], [
T2
 | _]} 
	gwhí
 ?
	`IS
(
	gT1
, '->'), ?IS(
	gT2
, 'end') ->

139 {
	gTab2
 - 2, 
	gn⁄e
};

140 {
	g_
, [
T
 | 
_
]} 
	gwhí
 ?
	`IS
(
	gT
, 'of') ->

141 {
	gTab2
 - 1, 
	gn⁄e
};

142 
	g_
 ->

143 {
	gTab
, 
	gCﬁ
}

144 
íd


145 
ˇtch


146 
	gthrow
:{
∑r£_îr‹
, 
	gLa°Toks
, 
	gLa°Sèã
, 
	g_Löe
} ->

147 
La°Toks
 
	gof


149 
	g_La°Tok
 = 
eof
;

150 [
_La°Tok
 | 
_
] ->

151 
_La°Tok


152 
	gíd
,

153 ?
	`PRINT_ERROR
(
	g_La°Tok
, 
	gLa°Sèã
, 
	g_Löe
),

154 {
	`hd
(
	gLa°Sèã
#
	g°©e
.
	gèbs
), hd(La°Sèã#°©e.
	gcﬁs
)}

155 
	gíd
.

157 
	`∑r£_tokís
(
	gTokís
 = [{'-', 
_
} | _]) ->

158 
	`∑r£_©åibuã
(
Tokís
, #
	g°©e
{});

159 
	`∑r£_tokís
(
	gTokís
 = [{
©om
, 
_
, _} | _]) ->

160 
	`∑r£_fun˘i⁄
(
Tokís
, #
	g°©e
{});

161 
	`∑r£_tokís
(
	gTokís
 = [{
T
, 
_
} | _]Ë
whí
 T ='['; 
	gT
 == '{'; T == '(' ->

162 
	`∑r£_d©um
(
Tokís
, #
	g°©e
{});

163 
	`∑r£_tokís
(
	gTokís
) ->

164 
	`throw
({
	g∑r£_îr‹
, 
	gTokís
, #
	g°©e
{}, ?
	gLINE
}).

166 
	`∑r£_d©um
([
T
 | 
Tokís
], 
	gSèã
) ->

167 
	`∑r£_√xt
(
	gTokís
, 
	`ödít
(
	`push
(
	gSèã
, 
	gT
, 0), 1));

168 
	`∑r£_d©um
([], 
	gSèã
) ->

169 
	gSèã
.

171 
	`∑r£_©åibuã
([
T
 = {'-', 
_
}, {
©om
, _, 
exp‹t
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = []}) ->

172 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, -1));

173 
	`∑r£_©åibuã
([
T1
 = {'-', 
_
}, 
T2
, 
T3
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = []}Ë
	gwhí
 ?
	`IS
(
	gT2
, 
	g©om
), ?IS(
	gT3
,átom) ->

174 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT1
, 1));

175 
	`∑r£_©åibuã
([
T
 = {'-', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = []}) ->

176 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 0));

177 
	`∑r£_©åibuã
(
	gTokís
, 
	gSèã
) ->

178 
	`throw
({
	g∑r£_îr‹
, 
	gTokís
, 
	gSèã
, ?
	gLINE
}).

180 
	`∑r£_fun˘i⁄
([
T
 = {
©om
, 
_
, _} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = []}) ->

181 
	`∑r£_√xt
(
	gTokís
, 
	`ödít
(
	`push
(
	gSèã
, 
	gT
, 1), 1));

182 
	`∑r£_fun˘i⁄
([], 
	gSèã
) ->

183 
	gSèã
;

184 
	`∑r£_fun˘i⁄
(
	gTokís
, 
	gSèã
) ->

185 
	`throw
({
	g∑r£_îr‹
, 
	gTokís
, 
	gSèã
, ?
	gLINE
}).

187 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
) ->

188 
	`∑r£_√xt2
(
	`√xt_ªÀv™t_tokí
(
	gTokís
), 
	gSèã
).

190 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`IS
(
	gT
, '<<') ->

191 
	`ßme_löe
(
	gT
, 
	gTokís
Ë
of


192 
	gåue
 ->

193 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1, 
	`cﬁumn
(T) + 1));

194 
	gÁl£
 ->

195 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1))

196 
	gíd
;

197 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`OPEN_BRACKET
(
	gT
) ->

198 
	`ßme_löe
(
	gT
, 
	gTokís
Ë
of


199 
	gåue
 ->

200 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1, 
	`cﬁumn
(T)));

201 
	gÁl£
 ->

202 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1))

203 
	gíd
;

204 
	`∑r£_√xt2
([
T1
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
 | 
_
]}Ë
	gwhí
 ?
	`CLOSE_BRACKET
(
	gT1
) ->

205 
	`symmëriˇl
(
	`ˇãg‹y
(
	gT1
)Ë=ˇãg‹y(
T2
Ë
of


206 
åue
 ->

207 
	`∑r£_√xt
(
Tokís
, 
	`p›
(
	gSèã
));

208 
	gÁl£
 ->

209 
	`throw
({
	g∑r£_îr‹
, [
T1
 | 
Tokís
], 
	gSèã
, ?
	gLINE
})

210 
	gíd
;

211 
	`∑r£_√xt2
([
T1
 = {'||', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT2
, '['); ?IS(T2, '<<') ->

212 
	`ßme_löe
(
	gT1
, 
	gTokís
Ë
of


213 
	gåue
 ->

214 
	`∑r£_√xt
(
	gTokís
, 
	`ªödít
(
	gSèã
, 1, 
	`cﬁumn
(
	gT1
) + 2));

215 
	gÁl£
 ->

216 
	`∑r£_√xt
(
	gTokís
, 
	`ªödít
(
	gSèã
, 0))

217 
	gíd
;

218 
	`∑r£_√xt2
([{'=', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T
 | _]}Ë
	gwhí
 ?
	`OPEN_BRACKET
(
	gT
) ->

219 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

220 
	`∑r£_√xt2
([
T1
 = {'=', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT2
, '=') ->

221 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	`p›
(
	gSèã
), 
	gT1
, 1, 
	`cﬁumn
(T1) + 1));

222 
	`∑r£_√xt2
([
T
 = {'=', 
_
} | 
Tokís
], 
	gSèã
) ->

223 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1, 
	`cﬁumn
(T) + 1));

224 
	`∑r£_√xt2
(
	gTokís
 = [
T1
 | 
_
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT2
, '='), 
	gnŸ
 ?IS(
	gT1
, ','),Çot ?IS(T1, ';') ->

225 
	`∑r£_√xt2
(
	gTokís
, 
	`p›
(
	gSèã
));

226 
	`∑r£_√xt2
([{',', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, '=') ->

227 
	`∑r£_√xt
(
	gTokís
, 
	`p›
(
	gSèã
));

228 
	`∑r£_√xt2
([{',', 
_
} | 
Tokís
], 
	gSèã
) ->

229 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

230 
	`∑r£_√xt2
(
	gTokís
 = [{';', 
_
} | _], 
	gSèã
 = #
°©e
{
°ack
 = [
T
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, '=') ->

231 
	`∑r£_√xt2
(
	gTokís
, 
	`p›
(
	gSèã
));

232 
	`∑r£_√xt2
([{';', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T1
, 
T2
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT1
, '->'), ?IS(
	gT2
, 
	g©om
) ->

233 
	`∑r£_fun˘i⁄
(
	gTokís
, 
	`p›
’›(
	gSèã
)));

234 
	`∑r£_√xt2
([{';', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'->', _}, 
T
 | _]}Ë
	gwhí
 ?
	`BRANCH_EXPR
(
	gT
) ->

235 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	`p›
(
	gSèã
), 2));

236 
	`∑r£_√xt2
([{';', 
_
} | 
Tokís
], 
	gSèã
) ->

237 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

238 
	`∑r£_√xt2
([{'fun', 
_
}, 
T
 | 
Tokís
], 
	gSèã
Ë
whí
 
	gnŸ
 ?
	`IS
(
	gT
, '(') ->

239 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

240 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`IS
(
	gT
, 'fun'); ?IS(T, 'receive'); ?IS(T, 'if') ->

241 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	`push
(
	gSèã
, 
	gT
, 1), 2));

242 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`BRANCH_EXPR
(
	gT
) ->

243 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1));

244 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`IS
(
	gT
, 'of') ->

245 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	gSèã
, 2));

246 
	`∑r£_√xt2
([
T1
 = {'->', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
]}Ë
	gwhí
 ?
	`IS
(
	gT2
, '-') ->

247 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT1
, 0));

248 
	`∑r£_√xt2
([
T1
 = {'->', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
]}Ë
	gwhí
 ?
	`IS
(
	gT2
, 
	g©om
) ->

249 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	`unödít
(
	gSèã
), 
	gT1
, 0));

250 
	`∑r£_√xt2
([
T1
 = {'->', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T2
 | _]}Ë
	gwhí
 ?
	`BRANCH_EXPR
(
	gT2
) ->

251 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	`unödít
(
	gSèã
), 
	gT1
, 1));

252 
	`∑r£_√xt2
([{'ˇtch', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T1
, 
T2
 | _]}Ë
whí


253 
	gnŸ
 ?
	`IS
(
	gT1
, 'åy'), 
	`nŸ
 (?IS(T1, '->'Ë
	g™d
 ?IS(
	gT2
, 'try')) ->

254 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

255 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'åy', 
_
} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'catch') ->

256 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	gSèã
, 2));

257 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'->', 
_
}, {'åy', _} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'catch') ->

258 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	`p›
(
	gSèã
), 2));

259 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'åy', 
_
} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

260 
	`∑r£_√xt
(
	gTokís
, 
	gSèã
);

261 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'ª˚ive', 
_
} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

262 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	`unödít
(
	gSèã
), 2));

263 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'->', 
_
}, {'ª˚ive', _} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

264 
	`∑r£_√xt
(
	gTokís
, 
	`ödít_a·î
(Tokís, 
	`p›
(
	gSèã
), 2));

265 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'->', 
_
} | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'after') ->

266 
	`∑r£_√xt
(
	gTokís
, 
	`p›
(
	gSèã
));

267 
	`∑r£_√xt2
([
T
 | 
Tokís
], 
	gSèã
Ë
	gwhí
 ?
	`IS
(
	gT
, 'begin') ->

268 
	`∑r£_√xt
(
	gTokís
, 
	`push
(
	gSèã
, 
	gT
, 1));

269 
	`∑r£_√xt2
([{'íd', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T
 | _]}Ë
	gwhí
 ?
	`IS
(
	gT
, 'begin'); ?IS(T, 'try') ->

270 
	`∑r£_√xt
(
	gTokís
, 
	`p›
(
	gSèã
));

271 
	`∑r£_√xt2
([{'íd', 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [{'->', _} | _]}) ->

272 
	`∑r£_√xt
(
	gTokís
, 
	`p›
’›(
	gSèã
)));

273 
	`∑r£_√xt2
([{
dŸ
, 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T
]}Ë
	gwhí
 ?
	`IS
(
	gT
, '-') ->

274 
	`∑r£_√xt
(
	gTokís
, 
	`p›
(
	gSèã
));

275 
	`∑r£_√xt2
([{
dŸ
, 
_
} | 
Tokís
], 
	gSèã
 = #
°©e
{
°ack
 = [
T
, _]}Ë
	gwhí
 ?
	`IS
(
	gT
, '->') ->

276 
	`∑r£_√xt
(
	gTokís
, 
	`p›
’›(
	gSèã
)));

277 
	`∑r£_√xt2
([], 
	gSèã
) ->

278 
	gSèã
;

279 
	`∑r£_√xt2
(
	gTokís
, 
	gSèã
) ->

280 
	`throw
({
	g∑r£_îr‹
, 
	gTokís
, 
	gSèã
, ?
	gLINE
}).

282 
	`ödít
(
	gSèã
, 
	gOffTab
) ->

283 
	`ödít
(
	gSèã
, 
	gOffTab
, 
	gn⁄e
).

285 
	`ödít
(
	gSèã
, 
	gOffTab
, 
	gCﬁ
) ->

286 
	gTabs
 = 
Sèã
#
°©e
.
èbs
,

287 
	gCﬁs
 = 
Sèã
#
°©e
.
cﬁs
,

288 
	gSèã
#
	g°©e
{
	gèbs
 = [
	`hd
(
Tabs
Ë+ 
OffTab
 | Tabs], 
	gcﬁs
 = [
Cﬁ
 | 
Cﬁs
]}.

290 
	`ödít_a·î
([], 
	gSèã
, 
	g_
) ->

291 
	gSèã
;

292 
	`ödít_a·î
(
	g_Tokís
, 
	gSèã
, 
	gOffTab
) ->

293 
	`ödít
(
	gSèã
, 
	gOffTab
).

295 
	`ªödít
(
	gSèã
, 
	gOffTab
) ->

296 
	`ªödít
(
	gSèã
, 
	gOffTab
, 
	gn⁄e
).

298 
	`ªödít
(
	gSèã
, 
	gOffTab
, 
	gCﬁ
) ->

299 [
Tab
 | 
Tabs
] = 
Sèã
#
°©e
.
èbs
,

300 [
_
 | 
Cﬁs
] = 
Sèã
#
°©e
.
cﬁs
,

301 
	gSèã
#
	g°©e
{
	gèbs
 = [
Tab
 + 
OffTab
 | 
Tabs
], 
	gcﬁs
 = [
Cﬁ
 | 
Cﬁs
]}.

303 
	`unödít
(
	gSèã
 = #
°©e
{
èbs
 = 
Tabs
, 
	gcﬁs
 = 
Cﬁs
}) ->

304 
	gSèã
#
	g°©e
{
	gèbs
 = 
	`é
(
Tabs
), 
	gcﬁs
 =Ål(
Cﬁs
)}.

306 
	`push
(
	gSèã
, 
	gTokí
, 
	gOffTab
) ->

307 
	`push
(
	gSèã
, 
	gTokí
, 
	gOffTab
, 
	gn⁄e
).

309 
	`push
(
	gSèã
 = #
°©e
{
°ack
 = 
Sèck
}, 
	gTokí
, 
	gOffTab
, 
	gCﬁ
) ->

310 
	`ödít
(
	gSèã
#
	g°©e
{
	g°ack
 = [
Tokí
 | 
Sèck
]}, 
	gOffTab
, 
	gCﬁ
).

312 
	`p›
(
	gSèã
 = #
°©e
{
°ack
 = 
Sèck
}) ->

313 
	`unödít
(
	gSèã
#
	g°©e
{
	g°ack
 = 
	`é
(
Sèck
)}).

315 
	`√xt_ªÀv™t_tokí
(
	gTokís
) ->

316 
	gli°s
:
	`dr›whûe
(
	`fun
(
T
Ë-> 
	`úªÀv™t_tokí
(TË
íd
, 
	gTokís
).

318 
	`úªÀv™t_tokí
(
	gTokí
) ->

319 
	gCh¨s
 = ['(', ')', '{', '}', '[', ']', '<<', '>>', '=', '->', '||', ',', ';', 
dŸ
],

320 
	gKeyw‹ds
 = ['fun', 'receive', 'if', 'case', 'try', 'of', 'catch', 'after', 'begin', 'end'],

321 
	gC©
 = 
	`ˇãg‹y
(
Tokí
),

322 
nŸ
 
	gli°s
:
	`membî
(
C©
, 
	gCh¨s
 ++ 
	gKeyw‹ds
).

324 
	`ßme_löe
(
	g_
, []) ->

325 
	gÁl£
;

326 
	`ßme_löe
(
	gTokí
, [
NextTok
 | 
_
]) ->

327 
	`löe
(
	gTokí
Ë=löe(
NextTok
Ë
of


328 
åue
 ->Årue;

329 
	gÁl£
 -> 
Ál£


330 
	gíd
.

332 
	`symmëriˇl
(')') -> '(';

333 
	`symmëriˇl
('}') -> '{';

334 
	`symmëriˇl
(']') -> '[';

335 
	`symmëriˇl
('>>') -> '<<'.

	@amix-vimrc/sources_non_forked/vimerl/test/test_spaces.erl

1 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()% 
	gvim
: 
ex∑ndèb
 
èb°›
=4 
shi·width
=4

3 -
	`moduÀ
(
ã°
).

5 -
	`exp‹t
([
foo
/0,

6 
bØØ¨
/2,

7 
bØØØØa
/4

10 -
	`exp‹t
([

11 
foo
/1,

12 
bØØ¨
/2,

13 
bØØØØa
/4]).

15 -
	`deföe
(
	gFOO
,

18 -
	`v¢
(

22 -
•ec
 
	`foo
(
	gX
Ë-> {
	gok
, 
	gKey
} | {
	gÁl£
, X} 
whí


23 
	gX
 :: 
	`ôî
(),

24 
	gKey
 :: 
	`öãgî
().

26 
	`b¨
() ->

27 
begö


28 
	`m‹e
(),

29 
	`™y
()

30 
	gíd
.

32 
	`b¨
() ->

33 
	gFoo
 = 
begö


34 
	`m‹e
(),

35 
begö


36 
	`no
()

37 
	gíd
,

38 
	`™y
()

39 
	gíd
,

40 
	`√ì
(Ë
	gof


42 
begö


43 
	`m‹e
()

44 
	gíd
;

45 
	g_
 ->

46 
fdf


47 
	gíd
.

49 
	`foo
() ->

50 
	gL
 = [1, 2

53 
	gL2
 = 
li°s
:
	`m≠
(
	`fun
(
N
) ->

54 
N
 + 1

55 
íd
, 
	gL
),

56 
	gL3
 = 
li°s
:
	`m≠
(

57 
	`fun
(
N
) ->

58 
N
 + 2

59 
íd
,

60 
	gL
),

61 
	gL4
 = 
li°s
:
	`m≠
(

62 
fun


64 
N
 + 1;

66 
	gN
 + 2;

67 (
	g_
) ->

68 
N


69 
	gíd
, 
	gL
).

71 
	`foo
() ->

73 {
	gfoooooooooooooooooo
,

74 
	gbØØØØØØØØ¨
}

75 
of


76 
	gok
 ->

77 
ok


78 
	gíd
,

79 
	gX
 = [{
a
, 
b
}, 
c
,

80 {
d
, 
e
, 
f
,

81 
g
}],

82 
	gY
 = <<
X
, 
	gX
, X,

83 
	gX
, X, X>>,

84 [{
X
, 
Y
, 
Z
} || X <- 
L1
,

85 
Y
 <- 
L2
,

86 
Z
 <- 
L3
],

87 [{
X
, 
Y
, 
Z
} ||

88 
X
 <- 
L1
,

89 
Y
 <- 
L2
,

90 
Z
 <- 
L3
],

91 [{
X
, 
Y
, 
Z
}

92 || 
X
 <- 
L1
,

93 
Y
 <- 
L2
,

94 
Z
 <- 
L3
],

95 
	gFoo
 = [{
X
, 
Y
, 
Z
} || X <- 
L1
,

96 
Y
 <- 
L2
,

97 
Z
 <- 
L3
],

98 
	gFoo
 = [{
X
, 
Y
, 
Z
} ||

99 
X
 <- 
L1
,

100 
Y
 <- 
L2
,

101 
Z
 <- 
L3
],

102 
	gFoo
 = [{
X
, 
Y
, 
Z
}

103 || 
X
 <- 
L1
,

104 
Y
 <- 
L2
,

105 
Z
 <- 
L3
],

106 
	gZ
 = [

107 
begö


108 
	`some
(
X
, 
Y
)

109 
íd
 || 
X
 <- 
L1
,

110 
Y
 <- 
L2
].

112 
	`foo
() ->

113 
	`b¨
(
fun
 
	gfoo
/0,

118 
	gX
 = 1 + 2 +

120 
	gY
 = 
	`foo
(Ë
of


121 
foo
 ->

122 
	`b¨
()

123 
íd
,

124 
	gok
.

126 
	`foo
() ->

127 
	`fuuuuuuuuuuuuur
(

131 
	gok
.

133 
	`fooooooooo
(
	gX
,

134 
	gY
Ë
whí


135 
	gX
 =:
Y
 ->

136 
ok
.

138 
	`foo
() ->

139 
	`foo
(Ë
of


140 
b¨
 ->

141 
ˇtch
 
	`fii
();

142 
	`fuu
() ->

143 
	`bî
()

144 
	gíd
.

146 
	`foo
() ->

147 
	`foo
(Ë
of


148 
	gb¨
 ->

149 
	gX
 = 
ˇtch
 
	`fii
();

150 
	`fuu
() ->

151 
	`bî
()

152 
	gíd
.

154 
	`foo
() ->

155 
	gX
 = 
åy


156 
	`foo
()

157 
ˇtch


158 
foo
 
whí


159 
foo
 ->

160 
	`b¨
()

161 
a·î


162 
	`b¨
()

163 
íd
.

165 
	`foo
() ->

166 
åy


167 
	`foo
()

168 
ˇtch


169 
foo
 
whí


170 
foo
 ->

171 
	`b¨
()

172 
a·î


173 
	`b¨
()

174 
íd
.

176 
	`foo
() ->

177 
åy


178 
	`foo
(),

179 
	`b¨
()

180 
of


181 
foo
 
whí


182 
	gb¨
 == 2 ->

183 
	`foo
(),

184 
	`b¨
();

185 
	gb¨
 ->

186 
foo


187 
	gíd
.

189 
	`foo
() ->

190 
åy


191 
	`foo
(),

192 
	`b¨
()

193 
of


194 
foo
 
whí


195 
	gb¨
 == 2 ->

196 
	`foo
(),

197 
	`b¨
();

198 
	gb¨
 ->

199 
foo


200 
a·î


201 
	`foo
(),

202 
	`b¨
()

203 
	gíd
.

205 
	`foo
() ->

206 
åy


207 
	`foo
(),

208 
	`b¨
()

209 
of


210 
foo
 
whí


211 
	gb¨
 == 2 ->

212 
	`foo
(),

213 
	`b¨
();

214 
	gb¨
 ->

215 
foo


216 
a·î


217 
	`foo
(),

218 
	`b¨
()

219 
	gíd
.

221 
	`foo
() ->

222 
åy


223 
	`foo
(),

224 
	`b¨
()

225 
of


226 
foo
 
whí


227 
	gb¨
 == 2 ->

228 
	`foo
(),

229 
	`b¨
();

230 
	gb¨
 ->

231 
foo


232 
ˇtch


233 
foo
 
whí


234 
	gfoo
 ->

235 
foo


236 
a·î


237 
	`foo
(),

238 
	`b¨
()

239 
	gíd
.

241 
	`foo
() ->

242 
ª˚ive


243 
	ga·î


245 
	`b¨
()

246 
	gíd
.

248 
	`foo
() ->

249 
ª˚ive


250 
foo
 
whí


251 
	gfoo
 ->

252 
	`foo
()

253 
	gíd
.

255 
	`foo
() ->

256 
ª˚ive


257 
foo
 
whí


258 
	gfoo
 ->

259 
	`foo
()

260 
	ga·î


262 
	`b¨
()

263 
	gíd
.

265 
	`foo
() ->

267 
	gfoo
 ->

268 
	`b¨
();

269 
	gb¨
 ->

270 
	`foo
()

271 
	gíd
.

273 
	`foo
() ->

274 
	`foo
(Ë
of


275 
foo
 
whí


276 
	gb¨
 ->

277 
	`foo
();

278 
	gb¨
 ->

279 
	gíd
.

281 
	`foo
() ->

283 
	`foo
()

284 
of


285 
foo
 
whí


286 
	gb¨
 ->

287 
	`foo
();

288 
	gb¨
 ->

289 
	gíd
.

	@amix-vimrc/sources_non_forked/vimerl/test/test_tabs.erl

1 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()% 
	gvim
: 
n€x∑ndèb
 
èb°›
=8 
shi·width
=8

3 -
	`moduÀ
(
ã°
).

5 -
	`exp‹t
([
foo
/0,

6 
bØØ¨
/2,

7 
bØØØØa
/4

10 -
	`exp‹t
([

11 
foo
/1,

12 
bØØ¨
/2,

13 
bØØØØa
/4]).

15 -
	`deföe
(
	gFOO
,

18 -
	`v¢
(

22 -
•ec
 
	`foo
(
	gX
Ë-> {
	gok
, 
	gKey
} | {
	gÁl£
, X} 
whí


23 
	gX
 :: 
	`ôî
(),

24 
	gKey
 :: 
	`öãgî
().

26 
	`b¨
() ->

27 
begö


28 
	`m‹e
(),

29 
	`™y
()

30 
	gíd
.

32 
	`b¨
() ->

33 
	gFoo
 = 
begö


34 
	`m‹e
(),

35 
begö


36 
	`no
()

37 
	gíd
,

38 
	`™y
()

39 
	gíd
,

40 
	`√ì
(Ë
	gof


42 
begö


43 
	`m‹e
()

44 
	gíd
;

45 
	g_
 ->

46 
fdf


47 
	gíd
.

49 
	`foo
() ->

50 
	gL
 = [1, 2

53 
	gL2
 = 
li°s
:
	`m≠
(
	`fun
(
N
) ->

54 
N
 + 1

55 
íd
, 
	gL
),

56 
	gL3
 = 
li°s
:
	`m≠
(

57 
	`fun
(
N
) ->

58 
N
 + 2

59 
íd
,

60 
	gL
),

61 
	gL4
 = 
li°s
:
	`m≠
(

62 
fun


64 
N
 + 1;

66 
	gN
 + 2;

67 (
	g_
) ->

68 
N


69 
	gíd
, 
	gL
).

71 
	`foo
() ->

73 {
	gfoooooooooooooooooo
,

74 
	gbØØØØØØØØ¨
}

75 
of


76 
	gok
 ->

77 
ok


78 
	gíd
,

79 
	gX
 = [{
a
, 
b
}, 
c
,

80 {
d
, 
e
, 
f
,

81 
g
}],

82 
	gY
 = <<
X
, 
	gX
, X,

83 
	gX
, X, X>>,

84 [{
X
, 
Y
, 
Z
} || X <- 
L1
,

85 
Y
 <- 
L2
,

86 
Z
 <- 
L3
],

87 [{
X
, 
Y
, 
Z
} ||

88 
X
 <- 
L1
,

89 
Y
 <- 
L2
,

90 
Z
 <- 
L3
],

91 [{
X
, 
Y
, 
Z
}

92 || 
X
 <- 
L1
,

93 
Y
 <- 
L2
,

94 
Z
 <- 
L3
],

95 
	gFoo
 = [{
X
, 
Y
, 
Z
} || X <- 
L1
,

96 
Y
 <- 
L2
,

97 
Z
 <- 
L3
],

98 
	gFoo
 = [{
X
, 
Y
, 
Z
} ||

99 
X
 <- 
L1
,

100 
Y
 <- 
L2
,

101 
Z
 <- 
L3
],

102 
	gFoo
 = [{
X
, 
Y
, 
Z
}

103 || 
X
 <- 
L1
,

104 
Y
 <- 
L2
,

105 
Z
 <- 
L3
],

106 
	gZ
 = [

107 
begö


108 
	`some
(
X
, 
Y
)

109 
íd
 || 
X
 <- 
L1
,

110 
Y
 <- 
L2
].

112 
	`foo
() ->

113 
	`b¨
(
fun
 
	gfoo
/0,

118 
	gX
 = 1 + 2 +

120 
	gY
 = 
	`foo
(Ë
of


121 
foo
 ->

122 
	`b¨
()

123 
íd
,

124 
	gok
.

126 
	`foo
() ->

127 
	`fuuuuuuuuuuuuur
(

131 
	gok
.

133 
	`fooooooooo
(
	gX
,

134 
	gY
Ë
whí


135 
	gX
 =:
Y
 ->

136 
ok
.

138 
	`foo
() ->

139 
	`foo
(Ë
of


140 
b¨
 ->

141 
ˇtch
 
	`fii
();

142 
	`fuu
() ->

143 
	`bî
()

144 
	gíd
.

146 
	`foo
() ->

147 
	`foo
(Ë
of


148 
	gb¨
 ->

149 
	gX
 = 
ˇtch
 
	`fii
();

150 
	`fuu
() ->

151 
	`bî
()

152 
	gíd
.

154 
	`foo
() ->

155 
	gX
 = 
åy


156 
	`foo
()

157 
ˇtch


158 
foo
 
whí


159 
foo
 ->

160 
	`b¨
()

161 
a·î


162 
	`b¨
()

163 
íd
.

165 
	`foo
() ->

166 
åy


167 
	`foo
()

168 
ˇtch


169 
foo
 
whí


170 
foo
 ->

171 
	`b¨
()

172 
a·î


173 
	`b¨
()

174 
íd
.

176 
	`foo
() ->

177 
åy


178 
	`foo
(),

179 
	`b¨
()

180 
of


181 
foo
 
whí


182 
	gb¨
 == 2 ->

183 
	`foo
(),

184 
	`b¨
();

185 
	gb¨
 ->

186 
foo


187 
	gíd
.

189 
	`foo
() ->

190 
åy


191 
	`foo
(),

192 
	`b¨
()

193 
of


194 
foo
 
whí


195 
	gb¨
 == 2 ->

196 
	`foo
(),

197 
	`b¨
();

198 
	gb¨
 ->

199 
foo


200 
a·î


201 
	`foo
(),

202 
	`b¨
()

203 
	gíd
.

205 
	`foo
() ->

206 
åy


207 
	`foo
(),

208 
	`b¨
()

209 
of


210 
foo
 
whí


211 
	gb¨
 == 2 ->

212 
	`foo
(),

213 
	`b¨
();

214 
	gb¨
 ->

215 
foo


216 
a·î


217 
	`foo
(),

218 
	`b¨
()

219 
	gíd
.

221 
	`foo
() ->

222 
åy


223 
	`foo
(),

224 
	`b¨
()

225 
of


226 
foo
 
whí


227 
	gb¨
 == 2 ->

228 
	`foo
(),

229 
	`b¨
();

230 
	gb¨
 ->

231 
foo


232 
ˇtch


233 
foo
 
whí


234 
	gfoo
 ->

235 
foo


236 
a·î


237 
	`foo
(),

238 
	`b¨
()

239 
	gíd
.

241 
	`foo
() ->

242 
ª˚ive


243 
	ga·î


245 
	`b¨
()

246 
	gíd
.

248 
	`foo
() ->

249 
ª˚ive


250 
foo
 
whí


251 
	gfoo
 ->

252 
	`foo
()

253 
	gíd
.

255 
	`foo
() ->

256 
ª˚ive


257 
foo
 
whí


258 
	gfoo
 ->

259 
	`foo
()

260 
	ga·î


262 
	`b¨
()

263 
	gíd
.

265 
	`foo
() ->

267 
	gfoo
 ->

268 
	`b¨
();

269 
	gb¨
 ->

270 
	`foo
()

271 
	gíd
.

273 
	`foo
() ->

274 
	`foo
(Ë
of


275 
foo
 
whí


276 
	gb¨
 ->

277 
	`foo
();

278 
	gb¨
 ->

279 
	gíd
.

281 
	`foo
() ->

283 
	`foo
()

284 
of


285 
foo
 
whí


286 
	gb¨
 ->

287 
	`foo
();

288 
	gb¨
 ->

289 
	gíd
.

	@
1
.
0
5
305
amix-vimrc/sources_non_forked/vimerl/autoload/erlang_complete.erl
amix-vimrc/sources_non_forked/vimerl/compiler/erlang_check.erl
amix-vimrc/sources_non_forked/vimerl/indent/erlang_indent.erl
amix-vimrc/sources_non_forked/vimerl/test/test_spaces.erl
amix-vimrc/sources_non_forked/vimerl/test/test_tabs.erl
